Write a program to give a solution to the Bounded buffer problem
from threading import Thread
from threading import Condition
from threading import current_thread
import time
import random
class BlockingQueue:
def __init__(self, max_size):
self.max_size = max_size
self.curr_size = 0
self.cond = Condition()
self.q = []
def dequeue(self):
self.cond.acquire()
while self.curr_size == 0:
self.cond.wait()
item = self.q.pop(0)
self.curr_size -= 1
self.cond.notifyAll()
self.cond.release()
return item
def enqueue(self, item):
self.cond.acquire()
while self.curr_size == self.max_size:
self.cond.wait()
self.q.append(item)
self.curr_size += 1
self.cond.notifyAll()
print("\ncurrent size of queue {0}".format(self.curr_size), flush=True)
self.cond.release()
def consumer_thread(q):
while 1:
item = q.dequeue()
print("\n{0} consumed item {1}".format(current_thread().getName(), item), flush=Tr
time.sleep(random.randint(1, 3))
def producer thread(q, val):
9/20/22, 3:44 PM practical 3.1.ipynb - Colaboratory
https://colab.research.google.com/drive/1di_oQg_1OqTJN0HNt1JAutNUXZUM3bjZ#scrollTo=S5ACxBhXYu3a&printMode=true 2/3
def producer_thread(q, val):
item = val
while 1:
q.enqueue(item)
item += 1
time.sleep(0.1)
if __name__ == "__main__":
blocking_q = BlockingQueue(5)
consumerThread1 = Thread(target=consumer_thread, name="consumer-1", args=(blocking_q,)
consumerThread2 = Thread(target=consumer_thread, name="consumer-2", args=(blocking_q,)
producerThread1 = Thread(target=producer_thread, name="producer-1", args=(blocking_q,
producerThread2 = Thread(target=producer_thread, name="producer-2", args=(blocking_q,
consumerThread1.start()
consumerThread2.start()
producerThread1.start()
producerThread2.start()
time.sleep(15)
print("Main thread exiting")
