Python Program for Reader-Writer Problem
import threading as thread
import random
global x #Shared Data
x = 0
lock = thread.Lock() #Lock for synchronising access
def Reader():
global x
print('Reader is Reading!')
lock.acquire() #Acquire the lock before Reading (mutex approach)
print('Shared Data:', x)
lock.release() #Release the lock after Reading
print()
def Writer():
global x
print('Writer is Writing!')
lock.acquire() #Acquire the lock before Writing
x += 1 #Write on the shared memory
print('Writer is Releasing the lock!')
lock.release() #Release the lock after Writing
print()
if __name__ == '__main__':
for i in range(0, 10):
randomNumber = random.randint(0, 100) #Generate a Random number between 0 to 100
if(randomNumber > 50):
Thread1 = thread.Thread(target = Reader)
Thread1.start()
else:
Thread2 = thread.Thread(target = Writer)
Thread2.start()
Thread1.join()
Thread2.join()
# print(x)
Reader is Reading!Reader is Reading!
Writer is Writing!
Shared Data:
0
Reader is Reading!
Shared Data: 0
Writer is Writing!Writer is Releasing the lock!
Shared Data: 1
9/20/22, 4:02 PM practical 3.2.ipynb - Colaboratory
https://colab.research.google.com/drive/14oCVIa6wZ7gSuyEQVD8YX8BLrc4CXFaw#scrollTo=yZ9WG34dZa2m&printMode=true 2/2
check 0s completed at 4:00 PM
Colab paid products - Cancel contracts here
Reader is Reading!
Writer is Releasing the lock!Reader is Reading!
Reader is Reading!Shared Data: 2
Shared Data: 2
Reader is Reading!Shared Data: 2
Shared Data: 2
Writer is Writing!
Writer is Releasing the lock!
